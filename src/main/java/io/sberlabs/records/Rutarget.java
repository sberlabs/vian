/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package io.sberlabs.records;  
@SuppressWarnings("all")
/** Schema for visitors event stream from Rutarget.ru */
@org.apache.avro.specific.AvroGenerated
public class Rutarget extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Rutarget\",\"namespace\":\"io.sberlabs.records\",\"doc\":\"Schema for visitors event stream from Rutarget.ru\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"ip_trunc\",\"type\":\"boolean\"},{\"name\":\"ua\",\"type\":\"string\"},{\"name\":\"ts\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence url;
  @Deprecated public java.lang.CharSequence ip;
  @Deprecated public boolean ip_trunc;
  @Deprecated public java.lang.CharSequence ua;
  @Deprecated public long ts;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Rutarget() {}

  /**
   * All-args constructor.
   */
  public Rutarget(java.lang.CharSequence id, java.lang.CharSequence url, java.lang.CharSequence ip, java.lang.Boolean ip_trunc, java.lang.CharSequence ua, java.lang.Long ts) {
    this.id = id;
    this.url = url;
    this.ip = ip;
    this.ip_trunc = ip_trunc;
    this.ua = ua;
    this.ts = ts;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return url;
    case 2: return ip;
    case 3: return ip_trunc;
    case 4: return ua;
    case 5: return ts;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: url = (java.lang.CharSequence)value$; break;
    case 2: ip = (java.lang.CharSequence)value$; break;
    case 3: ip_trunc = (java.lang.Boolean)value$; break;
    case 4: ua = (java.lang.CharSequence)value$; break;
    case 5: ts = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'ip' field.
   */
  public java.lang.CharSequence getIp() {
    return ip;
  }

  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(java.lang.CharSequence value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'ip_trunc' field.
   */
  public java.lang.Boolean getIpTrunc() {
    return ip_trunc;
  }

  /**
   * Sets the value of the 'ip_trunc' field.
   * @param value the value to set.
   */
  public void setIpTrunc(java.lang.Boolean value) {
    this.ip_trunc = value;
  }

  /**
   * Gets the value of the 'ua' field.
   */
  public java.lang.CharSequence getUa() {
    return ua;
  }

  /**
   * Sets the value of the 'ua' field.
   * @param value the value to set.
   */
  public void setUa(java.lang.CharSequence value) {
    this.ua = value;
  }

  /**
   * Gets the value of the 'ts' field.
   */
  public java.lang.Long getTs() {
    return ts;
  }

  /**
   * Sets the value of the 'ts' field.
   * @param value the value to set.
   */
  public void setTs(java.lang.Long value) {
    this.ts = value;
  }

  /** Creates a new Rutarget RecordBuilder */
  public static io.sberlabs.records.Rutarget.Builder newBuilder() {
    return new io.sberlabs.records.Rutarget.Builder();
  }
  
  /** Creates a new Rutarget RecordBuilder by copying an existing Builder */
  public static io.sberlabs.records.Rutarget.Builder newBuilder(io.sberlabs.records.Rutarget.Builder other) {
    return new io.sberlabs.records.Rutarget.Builder(other);
  }
  
  /** Creates a new Rutarget RecordBuilder by copying an existing Rutarget instance */
  public static io.sberlabs.records.Rutarget.Builder newBuilder(io.sberlabs.records.Rutarget other) {
    return new io.sberlabs.records.Rutarget.Builder(other);
  }
  
  /**
   * RecordBuilder for Rutarget instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Rutarget>
    implements org.apache.avro.data.RecordBuilder<Rutarget> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence url;
    private java.lang.CharSequence ip;
    private boolean ip_trunc;
    private java.lang.CharSequence ua;
    private long ts;

    /** Creates a new Builder */
    private Builder() {
      super(io.sberlabs.records.Rutarget.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(io.sberlabs.records.Rutarget.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.url)) {
        this.url = data().deepCopy(fields()[1].schema(), other.url);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ip)) {
        this.ip = data().deepCopy(fields()[2].schema(), other.ip);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ip_trunc)) {
        this.ip_trunc = data().deepCopy(fields()[3].schema(), other.ip_trunc);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ua)) {
        this.ua = data().deepCopy(fields()[4].schema(), other.ua);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ts)) {
        this.ts = data().deepCopy(fields()[5].schema(), other.ts);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Rutarget instance */
    private Builder(io.sberlabs.records.Rutarget other) {
            super(io.sberlabs.records.Rutarget.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.url)) {
        this.url = data().deepCopy(fields()[1].schema(), other.url);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ip)) {
        this.ip = data().deepCopy(fields()[2].schema(), other.ip);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ip_trunc)) {
        this.ip_trunc = data().deepCopy(fields()[3].schema(), other.ip_trunc);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ua)) {
        this.ua = data().deepCopy(fields()[4].schema(), other.ua);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ts)) {
        this.ts = data().deepCopy(fields()[5].schema(), other.ts);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public io.sberlabs.records.Rutarget.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public io.sberlabs.records.Rutarget.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'url' field */
    public java.lang.CharSequence getUrl() {
      return url;
    }
    
    /** Sets the value of the 'url' field */
    public io.sberlabs.records.Rutarget.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.url = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'url' field has been set */
    public boolean hasUrl() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'url' field */
    public io.sberlabs.records.Rutarget.Builder clearUrl() {
      url = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'ip' field */
    public java.lang.CharSequence getIp() {
      return ip;
    }
    
    /** Sets the value of the 'ip' field */
    public io.sberlabs.records.Rutarget.Builder setIp(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.ip = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'ip' field has been set */
    public boolean hasIp() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'ip' field */
    public io.sberlabs.records.Rutarget.Builder clearIp() {
      ip = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'ip_trunc' field */
    public java.lang.Boolean getIpTrunc() {
      return ip_trunc;
    }
    
    /** Sets the value of the 'ip_trunc' field */
    public io.sberlabs.records.Rutarget.Builder setIpTrunc(boolean value) {
      validate(fields()[3], value);
      this.ip_trunc = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'ip_trunc' field has been set */
    public boolean hasIpTrunc() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'ip_trunc' field */
    public io.sberlabs.records.Rutarget.Builder clearIpTrunc() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'ua' field */
    public java.lang.CharSequence getUa() {
      return ua;
    }
    
    /** Sets the value of the 'ua' field */
    public io.sberlabs.records.Rutarget.Builder setUa(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.ua = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'ua' field has been set */
    public boolean hasUa() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'ua' field */
    public io.sberlabs.records.Rutarget.Builder clearUa() {
      ua = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'ts' field */
    public java.lang.Long getTs() {
      return ts;
    }
    
    /** Sets the value of the 'ts' field */
    public io.sberlabs.records.Rutarget.Builder setTs(long value) {
      validate(fields()[5], value);
      this.ts = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'ts' field has been set */
    public boolean hasTs() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'ts' field */
    public io.sberlabs.records.Rutarget.Builder clearTs() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Rutarget build() {
      try {
        Rutarget record = new Rutarget();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.url = fieldSetFlags()[1] ? this.url : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.ip = fieldSetFlags()[2] ? this.ip : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.ip_trunc = fieldSetFlags()[3] ? this.ip_trunc : (java.lang.Boolean) defaultValue(fields()[3]);
        record.ua = fieldSetFlags()[4] ? this.ua : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.ts = fieldSetFlags()[5] ? this.ts : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
